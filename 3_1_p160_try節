'''
try節はできるだけ短く、１つの目的に絞って処理を実装する
'''
def purchase_from_view(request):
    try:
        product_id = request.POST['product_id']
        purchase_count = request.POST['purchase_count']
    except Keyerror as e:
        #必要なデータがPOSTされていない
        return render(request, 'purchase/purchase.html', {'error': f'{e.arg[0]}は必須です'})

    try:
        purchase_count = int(purchase_count)
        if purchase_count < 0:
            raise ValueError
    except ValueError:
        return render(requesr, 'purchase/purchase.html', {'error':'purchase_countは不正な値です'})

    try:
        product = get_product_by_id(product_id)
    except DoesNotExit:
        return render(request, 'purchase/purchase.html', {'error':'指定された商品が見つかりません'})

    if purchase_count > product.stock.count:
        return render(request, 'purchase/purchase.html', {'error': '商品の在庫が不足しています'})

    #購入の保存
    product.stock.count -= purchase_count
    product.stock.save()
    purchase = create_purchase(
        product = product,
        count = purchase_count,
        amount_price = purchase_count*product.price
    )

    return render(request, 'purchase/result.html', {'purchase': purchase})

#purchaseformを作る
class PurchaseForm(django.forms.Form):
    product = forms.IntegerField(label='商品')
    purchase_count = forms.IntergerField(label='個数', min_value=1, max_value=99)

    def clearn_product(self):
        try:
            return Product.objects.get(pk=self.cleaned_data['product'])
        except Product.DoesNotExist:
            raise forms.ValidationError('指定された商品が見つかりません')